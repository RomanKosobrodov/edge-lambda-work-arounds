AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Pass parameters to Lambda@Edge function using inline code, custom headers and AWS Secrets Manager

Resources:
  Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: resource-accessed-from-edge-lambda

  StoredSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Store resources for Lambda@Edge
      Name: edge-lambda-resources
      SecretString: !Sub '{"bucket": "${Bucket}"}'

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: "true"
        Comment: "Sample distribution for Lambda@Edge"
        Origins:
          - Id: cloudfront-default-origin
            DomainName: aws.amazon.com
            CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: match-viewer
            OriginCustomHeaders:
              - HeaderName: bucket
                HeaderValue: !Ref Bucket
        DefaultCacheBehavior:
          TargetOriginId: cloudfront-default-origin
          ForwardedValues:
            QueryString: "false"
            Headers:
              - Origin
            Cookies:
              Forward: none
          DefaultTTL: 10
          ViewerProtocolPolicy: allow-all
        CacheBehaviors:
          - PathPattern: inline/*
            TargetOriginId: cloudfront-default-origin
            ViewerProtocolPolicy: allow-all
            DefaultTTL: 10
            ForwardedValues:
              QueryString: "false"
              Headers:
                - Origin
              Cookies:
                Forward: none
            LambdaFunctionAssociations:
              - EventType: origin-request
                LambdaFunctionARN: !Ref LambdaEdgeFunctionInline.Version
          - PathPattern: secrets/*
            TargetOriginId: cloudfront-default-origin
            ViewerProtocolPolicy: allow-all
            DefaultTTL: 10
            ForwardedValues:
              QueryString: "false"
              Headers:
                - Origin
              Cookies:
                Forward: none
            LambdaFunctionAssociations:
              - EventType: origin-request
                LambdaFunctionARN: !Ref LambdaEdgeFunctionSecrets.Version
          - PathPattern: headers/*
            TargetOriginId: cloudfront-default-origin
            ViewerProtocolPolicy: allow-all
            DefaultTTL: 10
            ForwardedValues:
              QueryString: "false"
              Headers:
                - Origin
              Cookies:
                Forward: none
            LambdaFunctionAssociations:
              - EventType: origin-request
                LambdaFunctionARN: !Ref LambdaEdgeFunctionHeaders.Version

  LambdaEdgeFunctionInline:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaEdgeFunctionRole.Arn
      Runtime: python3.9
      Handler: index.handler
      Timeout: 10
      AutoPublishAlias: live
      InlineCode: !Sub |
        import boto3
        import json

        bucket_name = "${Bucket}"
        s3 = boto3.resource("s3")
        bucket = s3.Bucket(bucket_name)

        stats = list()
        total_size = 0
        for obj in bucket.objects.all():
            total_size += obj.size
            stats.append({"key": obj.key, "size": obj.size, "modified": str(obj.last_modified)})

        data = {
          "bucket": bucket_name,
          "content" : stats,
          "total_size": total_size
        }

        response = {
            "status": "200",
            "statusDescription": "OK",
            "body": json.dumps(data)
          }

        def handler(event, context): 
          return response

  LambdaEdgeFunctionSecrets:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaEdgeFunctionRole.Arn
      Runtime: python3.9
      CodeUri: src/secrets/
      Handler: app.handler
      Timeout: 10
      AutoPublishAlias: live

  LambdaEdgeFunctionHeaders:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaEdgeFunctionRole.Arn
      Runtime: python3.9
      CodeUri: src/headers/
      Handler: app.handler
      Timeout: 10
      AutoPublishAlias: live

  LambdaEdgeFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: LambdaEdgeFunctionRoleWithAccessToBucketAndSecrets
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"
      Policies:
        - PolicyName: AllowBucketAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "AccessBucketObjects"
                Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - !Sub "arn:aws:s3:::${Bucket}/*"
                  - !Sub "arn:aws:s3:::${Bucket}"
        - PolicyName: AllowAccessToSecret
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "AllowReadingSecretValue"
                Effect: "Allow"
                Action: "secretsmanager:GetSecretValue"
                Resource: !Ref StoredSecrets

Outputs:
  Distribution:
    Description: Cloudfront Distribution Domain Name
    Value: !GetAtt CloudFrontDistribution.DomainName
